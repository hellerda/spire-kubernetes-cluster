# General purpose Workload with tools like...
# - spiffe-client
# - spiffe-aws-assume-role
# - go-spiffe "https-client/server"

# Custom ServiceAccount for this Pod.  Otherwise it will use the default ServiceAccount.
apiVersion: v1
kind: ServiceAccount
metadata:
  name: spiffe-client
  namespace: spire

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: spiffe-client-cluster-role
rules:
- apiGroups: ["authentication.k8s.io"]
  resources: ["tokenreviews"]
  verbs: ["create"]

---

# Binds above cluster role to spiffe-client service account
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: spiffe-client-cluster-role-binding
subjects:
- kind: ServiceAccount
  name: spiffe-client
  namespace: spire
roleRef:
  kind: ClusterRole
  name: spiffe-client-cluster-role
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: spiffe-client
  labels:
    app: spiffe-client
    namespace: spire
spec:
  replicas: 1
  selector:
    matchLabels:
      app: spiffe-client
      namespace: spire
  template:
    metadata:
      labels:
        app: spiffe-client
        namespace: spire
        # Toggle K8sr auto-Spiffe ID creation for this Pod...
        spiffe.io/spiffe-id: "true"
        # Toggle Istio sidecar auto-injection for this Pod...
      # sidecar.istio.io/inject: "true"
      # Use custom sidecar template...
      annotations:
        inject.istio.io/templates: "sidecar,spire"
    spec:
      # hostPID: true
      # hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      # Toggle activation of the above service account...
      serviceAccountName: spiffe-client
      containers:
          # The workload...
        - name: spiffe-client
          image: 123456789123.dkr.ecr.us-east-2.amazonaws.com/spiffe-client:latest
          command: ["sleep", "infinity"]
          resources:
            limits:
              memory: 512Mi
              cpu: "1"
            requests:
              memory: 256Mi
              cpu: "0.2"
          volumeMounts:
            - name: spire-agent-socket
              mountPath: /run/spire/sockets
              # mountPath: /tmp/spire-agent/public
              readOnly: true
      volumes:
        - name: spire-agent-socket
          hostPath:
            # We should be able to use any agent in spire-kubernetes-cluster, as long as it has this volume mounted.
            # path: /run/spire/sockets/nesteda
            # path: /run/spire/sockets/nestedb
            path: /run/spire/sockets/nestedc
            type: Directory
          # Alternately point to the Spiffe CSI driver, if installed...
        # - name: spire-agent-socket
        #   csi:
        #     driver: "csi.spiffe.io"
        #     readOnly: true
