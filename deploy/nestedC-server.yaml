# NestedC Server deployment...

apiVersion: v1
kind: ServiceAccount
metadata:
  name: nestedc-server
  namespace: spire
  # To allow this Kubernetes ServiceAccount to acquire an AWS IAM Role...
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::123456789123:role/spire-server-eks-sa-role

---

# ClusterRole to allow nestedc-server node attestor to query Token Review API
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: nestedc-server-cluster-role
rules:
- apiGroups: ["authentication.k8s.io"]
  resources: ["tokenreviews"]
  verbs: ["create"]
  # Additional rules for k8sr...
- apiGroups: [""]
  resources: ["pods", "nodes"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "patch"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["get", "list", "patch", "watch"]

---

# Binds above cluster role to nestedc-server service account
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: nestedc-server-cluster-role-binding
subjects:
- kind: ServiceAccount
  name: nestedc-server
  namespace: spire
roleRef:
  kind: ClusterRole
  name: nestedc-server-cluster-role
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: nestedc-server-conf
  namespace: spire
data:
  server.conf: |
    server {
      trust_domain = "example.org"
      # jwt_issuer = "spire-nestedc-server"
      jwt_issuer = "https://oidc.spire.mydomain.com"
      bind_address = "0.0.0.0"
      bind_port = "8081"
      #socket_path = "/tmp/spire-server/private/api.sock"
      data_dir = "/run/spire/data"
      log_level = "DEBUG"
      default_svid_ttl = "24h"
      ca_ttl = "24h"
      # ca_subject = {
      #   country = ["US"],
      #   organization = ["SPIFFE"],
      #   common_name = "",
      # }
      # AWS Identity Provider requires RSA, ECDSA keys are NOT supported.
      ca_key_type = "rsa-4096"

      federation {
        bundle_endpoint {
          address = "0.0.0.0"
          port = 8443
        }
      }
    }

    plugins {
      DataStore "sql" {
        plugin_data {
          database_type = "sqlite3"
          connection_string = "/run/spire/data/datastore.sqlite3"
        }
      }

      NodeAttestor "k8s_psat" {
        plugin_data {
          clusters = {
            "spire" = {
              service_account_allow_list = ["spire:nestedc-agent"]
              # For "k8s_sat" only...
              #use_token_review_api_validation = true
              # For "k8s_psat" only...
              # This is the default, so if set this value in the YAML it does not need need to be specified here.
              #audience = "spire-server"
              # This makes it work with the DEFAULT PSAT (at "/var/run/secrets/kubernetes.io/serviceaccount/token")
              # audience = []
            }
          }
        }
      }

      # To allow an EC2-based agent to attest from outside the cluster...
      NodeAttestor "aws_iid" {
        plugin_data {
          assume_role = "spire-server-delegate-role"
          #agent_path_template = "{{ .PluginName}}/{{ .AccountID }}/{{ .Region }}/{{ .InstanceID }}"
          #agent_path_template = "{{ .PluginName}}/{{ .AccountID }}/{{ .Region }}/{{ .InstanceID }}/{{ .Tags.Name }}"
          #agent_path_template = "{{ .PluginName}}/{{ .AccountID }}/{{ .Resource }}/{{ .Tags.tag1 }}"
          #agent_path_template = "{{ .PluginName}}/{{ .AccountID }}/{{ .Resource }}/server1/{{ .Tags.tag1 }}"
        }
      }

      KeyManager "disk" {
        plugin_data {
          keys_path = "/run/spire/data/keys.json"
        }
      }

      UpstreamAuthority "spire" {
        plugin_data = {
            server_address      = "root-server"
            server_port         = 8081
            # This is points to Root Agent's API socket:
            workload_api_socket = "/run/spire/sockets/agent.sock"
        }
      }

      Notifier "k8sbundle" {
        plugin_data {
          webhook_label = "spiffe.io/webhook"
        }
      }
    }

    # health_checks {
    #   listener_enabled = true
    #   bind_address = "0.0.0.0"
    #   bind_port = "8080"
    #   live_path = "/live"
    #   ready_path = "/ready"
    # }

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: nestedc-server
  namespace: spire
  labels:
    app: nestedc-server
    realm: spire-control-plane
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nestedc-server
  serviceName: nestedc-server
  template:
    metadata:
      namespace: spire
      labels:
        app: nestedc-server
        realm: spire-control-plane
    spec:
      serviceAccountName: nestedc-server
      shareProcessNamespace: true
      containers:
          # NestedC server container...
        - name: nestedc-server
          image: gcr.io/spiffe-io/spire-server:1.5.5
          args: ["-config", "/run/spire/config/server.conf"]
          ports:
            - containerPort: 8081
          volumeMounts:
            - name: spire-config
              mountPath: /run/spire/config
              readOnly: true
            - name: spire-data
              mountPath: /run/spire/data
              readOnly: false
              # For accessing the root-agent socket, so this server can attest as a downstream...
            - name: root-agent-socket
              mountPath: /run/spire/sockets
              readOnly: false
              # For sharing the nestedc-server socket between containers, for running k8sr in-pod...
            - name: shared-slash-tmp
              mountPath: /tmp
              readOnly: false
          # livenessProbe:
          #   httpGet:
          #     path: /live
          #     port: 8080
          #   failureThreshold: 2
          #   initialDelaySeconds: 15
          #   periodSeconds: 6000
          #   timeoutSeconds: 3
          # readinessProbe:
          #   httpGet:
          #     path: /ready
          #     port: 8080
          #   initialDelaySeconds: 5
          #   periodSeconds: 5
          livenessProbe:
            exec:
              command: ["/opt/spire/bin/spire-server", "healthcheck"]
            failureThreshold: 2
            initialDelaySeconds: 15
            periodSeconds: 60
            timeoutSeconds: 3
          readinessProbe:
            exec:
              command: ["/opt/spire/bin/spire-server", "healthcheck", "--shallow"]
            initialDelaySeconds: 5
            periodSeconds: 5
          # SPIRE Kubernetes Registrar container...
        - name: k8s-workload-registrar
          image: gcr.io/spiffe-io/k8s-workload-registrar:1.5.5
          args: ["-config", "/run/spire/config/k8s-workload-registrar.conf"]
          ports:
            - containerPort: 9443
              name: webhook
              protocol: TCP
          volumeMounts:
            - mountPath: /run/spire/config
              name: k8s-workload-registrar-config
              readOnly: true
              # For sharing the nestedc-server socket between containers, for running k8sr in-pod...
            - name: shared-slash-tmp
              mountPath: /tmp
              readOnly: false
      # Volumes are common to all containers, of course...
      volumes:
        - name: spire-config
          configMap:
            name: nestedc-server-conf
          # For accessing the root-agent socket, so this server can attest as a downstream node.
        - name: root-agent-socket
          hostPath:
            path: /run/spire/sockets/root
            type: Directory
          # Additional configuration, for running k8sr in the same pod..
        - name: k8s-workload-registrar-config
          configMap:
            name: k8s-workload-registrar
          # To share the SPIRE server UDS between containers, for running k8sr in the same pod..
        - name: shared-slash-tmp
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: spire-data
        namespace: spire
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi

---

apiVersion: v1
kind: Service
metadata:
  name: nestedc-server
  namespace: spire
spec:
  type: NodePort
  ports:
    - name: grpc
      port: 8081
      targetPort: 8081
      protocol: TCP
    - name: fed-endpoint
      port: 8443
      targetPort: 8443
      protocol: TCP
  selector:
    app: nestedc-server

---

apiVersion: v1
kind: Service
metadata:
  name: k8s-workload-registrar
  namespace: spire
spec:
  ports:
  - name: webhook
    protocol: TCP
    port: 443
    targetPort: 9443
  selector:
    app: nestedc-server

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: k8s-workload-registrar-role
rules:
- apiGroups: [""]
  resources: ["endpoints", "nodes", "pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["spiffeid.spiffe.io"]
  resources: ["spiffeids"]
  verbs: ["create", "delete", "get", "list", "patch", "update", "watch"]
- apiGroups: ["spiffeid.spiffe.io"]
  resources: ["spiffeids/status"]
  verbs: ["get", "patch", "update"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: k8s-workload-registrar-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: k8s-workload-registrar-role
subjects:
- kind: ServiceAccount
  name: nestedc-server
  namespace: spire

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: spire-bundle
  namespace: spire

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: k8s-workload-registrar
  namespace: spire
data:
  k8s-workload-registrar.conf: |
    log_level = "debug"
    trust_domain = "example.org"
    server_socket_path = "/tmp/spire-server/private/api.sock"
    # server_address = "nestedc-server:8081"
    cluster = "spire"
    mode = "crd"
    # pod_label = "spiffe.io/spiffe-id"
    # pod_annotation = "spiffe.io/spiffe-id"
    identity_template_label = "spiffe.io/spiffe-id"
    pod_controller = true
    webhook_enabled = true
    # The first one is the DEFAULT "identity_template"...
    # identity_template = "ns/{{.Pod.Namespace}}/sa/{{.Pod.ServiceAccount}}"
    # identity_template = "ns/{{.Pod.Namespace}}/pod/{{.Pod.Name}}"
    # identity_template = "ns/{{.Pod.Namespace}}/node/{{.Pod.NodeName}}/pod/{{.Pod.Name}}/sa/{{.Pod.ServiceAccount}}"

---

apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: k8s-workload-registrar
  labels:
    spiffe.io/webhook: "true"
webhooks:
- name: k8s-workload-registrar.spire.svc
  admissionReviewVersions: ["v1", "v1beta1"]
  clientConfig:
    service:
      name: k8s-workload-registrar
      namespace: spire
      path: "/validate-spiffeid-spiffe-io-v1beta1-spiffeid"
  rules:
  - apiGroups: ["spiffeid.spiffe.io"]
    apiVersions: ["v1beta1"]
    operations: ["CREATE", "UPDATE", "DELETE"]
    resources: ["spiffeids"]
    scope: Namespaced
  sideEffects: None
