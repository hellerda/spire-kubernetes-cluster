# This is the Envoy reverse proxy config, NOT a Kubernetes manifest file.

node:
  id: "spiffe-client-envoy"
  cluster: "spire"
admin:
  access_log_path: /tmp/admin_access0.log
  address:
    socket_address:
      protocol: TCP
      address: 127.0.0.1
      port_value: 8100
static_resources:
  listeners:
  - name: ingress_listener
    address:
      socket_address:
        # Address and port to listen on.  Select IPv4 or dualstack.
        address: "0.0.0.0"
      # address: "::"
        port_value: 2222
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
          common_http_protocol_options:
            idle_timeout: 1s
          forward_client_cert_details: sanitize_set
          set_current_client_cert_details:
              uri: true
          codec_type: auto
          access_log:
          - name: envoy.file_access_log
            config:
              path: "/tmp/inbound-proxy.log"
          stat_prefix: ingress_http
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains: ["*"]
              routes:
              - match:
                  prefix: "/"
                  headers:
                    # Emissary requires this header specifically, it's hard-coded in Emissary src.
                  - name: x-emissary-auth
                    present_match: true
                route:
                  cluster: local_service
              - match:
                  prefix: "/"
                per_filter_config:
                  # Note this causes Envoy to SKIP JWT VALIDATION on any that do not have the required hdr.
                  envoy.ext_authz:
                    disabled: true
                route:
                  cluster: local_service
          http_filters:
          - name: envoy.ext_authz
            config:
              http_service:
                server_uri:
                  uri: ext-authz
                  cluster: ext-authz
                  timeout: 1s
                authorization_request:
                  # Note this is a hdr added by Envoy in communication with Emissary.
                  headers_to_add:
                    - key: x-emissary-mode
                      value: "ingress"
                  # This is the incoming header to Envoy, in the original request.
                  allowed_headers:
                    patterns:
                      - exact: x-emissary-auth
                authorization_response:
                  allowed_upstream_headers:
                    patterns:
                      - exact: x-emissary-auth-status
                  allowed_client_headers:
                    patterns:
                      - exact: x-emissary-auth-status
          - name: envoy.router
      tls_context:
        common_tls_context:
          tls_certificate_sds_secret_configs:
            # This is my (server-side) Spiffe ID.
          - name: "spiffe://example.org/ns/spire/sa/spiffe-client-envoy-emissary"
            sds_config:
              api_config_source:
                api_type: GRPC
                grpc_services:
                  envoy_grpc:
                    cluster_name: spire_agent
          combined_validation_context:
            default_validation_context:
              # Incoming identities we will allow...
              match_subject_alt_names:
                - exact: "spiffe://example.org/ns/spire/sa/spiffe-client"
                - exact: "spiffe://example.org/nestedc-workload-ec2"
            # Envoy speaks SDS directly to the SPIRE agent.
            # (and so is "attested" like any workload. so it needs a reg entry like any workload.)
            validation_context_sds_secret_config:
              name: "spiffe://example.org"
              sds_config:
                api_config_source:
                  api_type: GRPC
                  grpc_services:
                    envoy_grpc:
                      cluster_name: spire_agent
          tls_params:
            ecdh_curves:
              - X25519:P-256:P-521:P-384
  clusters:
    # For SPIRE Agent, which listens on a socket.
  - name: spire_agent
    connect_timeout: 0.25s
    http2_protocol_options: {}
    hosts:
      - pipe:
          path: /run/spire/sockets/agent.sock
    # This is our back-end service we are proxying to.
  - name: local_service
    connect_timeout: 1s
    type: strict_dns
    # type: static
    hosts:
      - socket_address:
          address: 127.0.0.1
          # address: localhost
          port_value: 2223
    # For Emissary, which listens on a socket. (if so configured; alternately it can listen on a TCP port)
  - name: ext-authz
    connect_timeout: 0.25s
    hosts:
      - pipe:
          path: /run/emissary/sockets/auth.sock
