# This is the Envoy forward proxy config, NOT a Kubernetes manifest file.

node:
  id: "spiffe-client-envoy-emissary"
  cluster: "spire"
admin:
  access_log_path: /tmp/admin_access0.log
  address:
    socket_address:
      protocol: TCP
      address: 127.0.0.1
      port_value: 8100
static_resources:
  listeners:
  - name: outbound_proxy
    address:
      socket_address:
        address: 127.0.0.1
        port_value: 2223
    filter_chains:
    - filters:
      - name: envoy.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
          common_http_protocol_options:
            idle_timeout: 1s
          codec_type: auto
          access_log:
          - name: envoy.file_access_log
            config:
              path: "/tmp/outbound-proxy.log"
          stat_prefix: ingress_http
          route_config:
            name: service_route
            virtual_hosts:
            - name: outbound_proxy
              domains: ["*"]
              routes:
              - match:
                  prefix: "/"
                route:
                  cluster: remote
          http_filters:
          - name: envoy.ext_authz
            config:
              http_service:
                server_uri:
                  uri: ext-authz
                  cluster: ext-authz
                  timeout: 1s
                authorization_request:
                  # Note this is a hdr added by Envoy in communication with Emissary.
                  headers_to_add:
                    - key: x-emissary-mode
                      value: "egress"
                authorization_response:
                  allowed_upstream_headers:
                    patterns:
                      - exact: x-emissary-auth
          - name: envoy.router
  clusters:
    # For SPIRE Agent, which listens on a socket.
  - name: spire_agent
    connect_timeout: 0.25s
    http2_protocol_options: {}
    hosts:
      - pipe:
          path: /run/spire/sockets/agent.sock
    # This is the remote service we are proxying to.
  - name: remote
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: ROUND_ROBIN
    hosts:
      - socket_address:
          # This is the destination host and port we are sending to...
          # address: 10.10.10.10
          # If DNS not is available, you can add a hostname entry to client's /etc/hosts and use it here:
          address: targethost
          port_value: 2222
    tls_context:
      common_tls_context:
        tls_certificate_sds_secret_configs:
      # - name: "spiffe://example.org/ns/spire/sa/default"
        - name: "spiffe://example.org/ns/spire/sa/spiffe-client-envoy-emissary"
          sds_config:
            api_config_source:
              api_type: GRPC
              grpc_services:
                envoy_grpc:
                  cluster_name: spire_agent
        combined_validation_context:
          # validate the SPIFFE ID of the server (recommended)
          default_validation_context:
            match_subject_alt_names:
              - exact: "spiffe://example.org/ns/spire/sa/spiffe-client"
              - exact: "spiffe://example.org/ns/spire/sa/spiffe-client-envoy-emissary"
              - exact: "spiffe://example.org/nestedc-workload-ec2"
          validation_context_sds_secret_config:
            name: "spiffe://example.org"
            sds_config:
              api_config_source:
                api_type: GRPC
                grpc_services:
                  envoy_grpc:
                    cluster_name: spire_agent
        tls_params:
          ecdh_curves:
            - X25519:P-256:P-521:P-384
    # For Emissary, which listens on a socket. (if so configured; alternately it can listen on a TCP port)
  - name: ext-authz
    connect_timeout: 0.25s
    hosts:
      - pipe:
          path: /run/emissary/sockets/auth.sock
