# NestedA Server deployment...

apiVersion: v1
kind: ServiceAccount
metadata:
  name: nesteda-server
  namespace: spire

---

# ClusterRole to allow nesteda-server node attestor to query Token Review API
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: nesteda-server-cluster-role
rules:
- apiGroups: ["authentication.k8s.io"]
  resources: ["tokenreviews"]
  verbs: ["create"]

---

# Binds above cluster role to nesteda-server service account
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: nesteda-server-cluster-role-binding
subjects:
- kind: ServiceAccount
  name: nesteda-server
  namespace: spire
roleRef:
  kind: ClusterRole
  name: nesteda-server-cluster-role
  apiGroup: rbac.authorization.k8s.io

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: nesteda-server-conf
  namespace: spire
data:
  server.conf: |
    server {
      trust_domain = "example.org"
      jwt_issuer = "spire-nesteda-server"
      bind_address = "0.0.0.0"
      bind_port = "8081"
      #socket_path = "/tmp/spire-server/private/api.sock"
      data_dir = "/run/spire/data"
      log_level = "DEBUG"
      default_x509_svid_ttl = "1h"
      default_jwt_svid_ttl = "1h"
      ca_ttl = "24h"
      # ca_subject = {
      #   country = ["US"],
      #   organization = ["SPIFFE"],
      #   common_name = "",
      # }

      federation {
        bundle_endpoint {
          address = "0.0.0.0"
          port = 8443
        }
      }
    }

    plugins {
      DataStore "sql" {
        plugin_data {
          database_type = "sqlite3"
          connection_string = "/run/spire/data/datastore.sqlite3"
        }
      }

      NodeAttestor "k8s_sat" {
        plugin_data {
          clusters = {
            "spire" = {
              service_account_allow_list = ["spire:nesteda-agent", "spire:oidc-provider"]
              use_token_review_api_validation = true
            }
          }
        }
      }

      KeyManager "disk" {
        plugin_data {
          keys_path = "/run/spire/data/keys.json"
        }
      }

      UpstreamAuthority "spire" {
        plugin_data = {
            server_address      = "root-server"
            server_port         = 8081
            # This is points to Root Agent's API socket:
            workload_api_socket = "/run/spire/sockets/agent.sock"
        }
      }
    }

    health_checks {
      listener_enabled = true
      bind_address = "0.0.0.0"
      bind_port = "8080"
      live_path = "/live"
      ready_path = "/ready"
    }

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: nesteda-server
  namespace: spire
  labels:
    app: nesteda-server
    realm: spire-control-plane
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nesteda-server
  serviceName: nesteda-server
  template:
    metadata:
      namespace: spire
      labels:
        app: nesteda-server
        realm: spire-control-plane
    spec:
      serviceAccountName: nesteda-server
      containers:
        - name: nesteda-server
          image: ghcr.io/spiffe/spire-server:1.6.1
          args: ["-config", "/run/spire/config/server.conf"]
          ports:
            - containerPort: 8081
          volumeMounts:
            - name: spire-config
              mountPath: /run/spire/config
              readOnly: true
            - name: spire-data
              mountPath: /run/spire/data
              readOnly: false
              # For accessing the root-agent socket, so this server can attest as a downstream...
            - name: root-agent-socket
              mountPath: /run/spire/sockets
              readOnly: false
              # This is for us to share this node's Server socket, for OIDC integration
            - name: nesteda-server-socket
              mountPath: /tmp/spire-server/private
              readOnly: false
          livenessProbe:
            httpGet:
              path: /live
              port: 8080
            failureThreshold: 2
            initialDelaySeconds: 15
            periodSeconds: 6000
            timeoutSeconds: 3
          readinessProbe:
            httpGet:
              path: /ready
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: spire-config
          configMap:
            name: nesteda-server-conf
          # For accessing the root-agent socket, so this server can attest as a downstream node.
        - name: root-agent-socket
          hostPath:
            path: /run/spire/sockets/root
            type: Directory
          # This is for us to share this node's Server socket, for OIDC integration
        - name: nesteda-server-socket
          hostPath:
            path: /run/spire/sockets/nesteda
            type: DirectoryOrCreate
  volumeClaimTemplates:
    - metadata:
        name: spire-data
        namespace: spire
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi

---

apiVersion: v1
kind: Service
metadata:
  name: nesteda-server
  namespace: spire
spec:
  type: NodePort
  ports:
    - name: grpc
      port: 8081
      targetPort: 8081
      protocol: TCP
  selector:
    app: nesteda-server
